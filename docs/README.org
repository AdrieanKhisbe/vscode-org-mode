#+TITLE: Visual Studio Code org-mode Development README
* TODO About
VS Code Org Mode (~vscode-org-mode~) is an extension for Visual Studio Code that allows users to read and write ~.org~ files.
** Describe what Org does
- List notation markup
  - Syntax highlighting
  - Actions
- Todo functionality
- Similar to markdown, but with actions
** Describe what VS Code is
** Describe what a VS Code extension is
* Functionality & MVP
The following features will comprise the minimum viable product.
1. Syntax Highlighting
   - Certain character combinations will be highlighted in display.
   - For example, lines beginning with asterisks (headers) will be colored.
   - Strictly speaking, the MVP feature will be considered complete when the extension allows for any keywords or markup to be highlighted, since this is the foundation necessary to adding new syntax highlighting. Broadly speaking, the goal will be to implement a number of keywords and markup for highlighting.
   - See wireframes below for examples. See [[file:feature_queue.org][feature_queue.org]] for keywords and markup under consideration for development, time permitting.
2. Actions
   - Users will be able invoke actions from the command palette.
   - One example action, ~org-insert-sibling~ will insert a second item of the same type as the current. When the cursor is on a header, it will insert a second header of the same level. When the cursor is on a bulleted list, it will insert another bullet point of the same level.
   - Strictly speaking, the MVP feature will be considered complete when the extension allows for any actions to be invoked via the command palette, since this is the foundation necessary to adding new actions. Broadly speaking, the goal will be to implement a number of actions.
   - See [[file:feature_queue.org][feature_queue.org]] for further examples of actions under consideration for development, time permitting.
3. Customizations
   - Users will be able to specify custom settings as part of the VS Code user settings JSON file.
   - For instance, users will be able to specify their own TODO keywords (such as ~WAIT~) beyond the default (~TODO~, ~DONE~).
   - Strinctly speaking, the MVP feature will be considered complete when the extension allows for any settings to be customized by users, since this is the foundation necessary to adding further customizations. Broadly speaking, the goal will be to implement a number of customizations.
   - See [[file:feature_queue.org][feature_queue.org]] for further examples of settings under consideration for development, time permitting.
4. Available on Visual Studio Marketplace
   - Users will be able to install the extension via the Visual Studio Code Marketplace
5. Documentation
   - Users will be able to discover the extension's features via a documentation page.
6. Example site
   - Potential users will be able to discover the functionality of the extension on an example site, which will feature written explanations of key features and gifs demonstrating those features.
* TODO Wireframes
Since the extension is based on the functionality of Org mode in Emacs, the development wireframes are in fact screenshots of original features in Emacs.
* TODO Technologies
** TypeScript
** VS Code extension
** Node
- For VS Code extension
* Division of Labor
The group consists of three members: Jason Reeder, Amos Too, and Gilbert Schmitt.

While the project is in its first phase, different team members will own different aspects of the setup process. After the foundation has been laid, team members will switch focusing on implementing new features.

- During setup, each team member owns a different vertical:
  - Gilbert establishes the project's presence on the VS Code Marketplace.
  - Amos begins the first feature, ~headers~. See Timeline below for more details.
  - Jason creates development documentation for the features available in the original Org mode to structure work for the project. 
  
- After setup, team members start owning the implementation of individual features. For each feature, the team member:
  - Adds the associated action (eg ~insert-todo~).
  - Adds the associated syntax highlighting (eg the letters ~TODO~ are highlighted in red).
  - Adds the associated customizations (eg users can add custom TODO keywords).
  - Adds the associated documentation.
* Timeline
Note: The features listed for each day are meant as estimates, and will surely shift as the project evolves.
** Day 1
- Housekeeping
  - Start the project's page on VS Code Marketplace, allowing users to access a sample ~org-hello-world~ action (Gilbert)
  - Complete development documentation outlining all relevant features available in the original Org mode (Jason)
- Features
  - Begin ~headers~: highlighting for the levels of headers (lines beginning with asterisks) and the action ~insert-sibling~ (described in the MVPs section above) (Amos)
** Day 2
- Housekeeping
  - Build example site with placeholder data (Jason)
- Features
  - Continue ~headers~ (Amos)
  - Begin ~dates~: highlighting for date syntax and the action ~insert-current-date~ (Gilbert)
** Day 3
- Housekeeping
  - Release a beta version of the extension to the marketplace (Gilbert)
- Features
  - Begin ~lists~: highlighting for ordered and unordered lists and the action ~insert-sibling~ for those lists (Amos)
  - Begin ~todos~: highlighting for TODO keywords, the action ~insert-todo~, customization of TODO keywords (Gilbert)
  - Begin ~span-highlighting~: specific highlighting for words in span tags (** for bold, // for italics, ~~ for fixed width) (Jason)
** Day 4
- Housekeeping
  - Polish example site's appearance (Jason)
- Features
  - Begin ~smart-reorder~: allowing items in ordered lists to be moved up or down with all list numbers updating (Amos)
  - Begin ~folding~: allowing headings to be opened or closed, customization to allow one by default (Gilbert)
  - Begin ~links~: syntax highlighting for links, action ~follow-link~ which allows users to jump to linked files or open URLs in a browser
** Day 5
- Housekeeping
  - Take gifs and write descriptions for example site (Jason)
  - Patch up bugs in existing features (Amos)
  - Release a polished version of the extension to the marketplace (Gilbert)
- Features
  - Any desired features, time permitting
* TODO Plan for Publicizing
